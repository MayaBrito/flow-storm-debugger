{:paths ["src-inst" "src-dbg" "src-shared" "resources"]
 :deps {;; IMPORTANT !!
        ;; If adding any dependency for the `inst` part also add it on
        ;; build.clj jar-inst
        org.java-websocket/Java-WebSocket {:mvn/version "1.5.3"}
        com.cognitect/transit-clj {:mvn/version "1.0.333"}
        com.cognitect/transit-cljs {:mvn/version "0.8.280"}
        io.github.clojure/tools.build {:mvn/version "0.9.4" :exclusions [com.google.guava/guava org.slf4j/slf4j-nop]}
        com.github.jpmonettas/hansel {:mvn/version "0.1.78"}

        org.openjfx/javafx-controls {:mvn/version "19.0.2.1"}
        org.openjfx/javafx-base {:mvn/version "19.0.2.1"}
        org.openjfx/javafx-graphics {:mvn/version "19.0.2.1"}
        org.openjfx/javafx-swing {:mvn/version "19.0.2.1"}
        org.kordamp.ikonli/ikonli-javafx {:mvn/version "11.5.0"}
        org.kordamp.ikonli/ikonli-materialdesign-pack {:mvn/version "11.5.0"}
        com.github.jpmonettas/j-system-theme-detector {:mvn/version "3.8"}
        nrepl/nrepl {:mvn/version "1.0.0"}
        org.clojure/data.int-map {:mvn/version "1.2.1"}}

 :aliases {:cljs {:extra-deps {cider/cider-nrepl {:mvn/version "0.28.3"}
                               refactor-nrepl/refactor-nrepl {:mvn/version "3.5.2"}
                               cider/piggieback {:mvn/version "0.5.2"}
                               thheller/shadow-cljs {:mvn/version "2.23.3"}}}

           :storm {:classpath-overrides {org.clojure/clojure nil}
                   :extra-deps {com.github.jpmonettas/clojure {:mvn/version "1.12.0-alpha4_3"}}
                   :jvm-opts [
                              ;; "-Xmx20500m"

                              "-Dflowstorm.startRecording=false"
                              "-Dflowstorm.theme=dark"
                              "-Dclojure.storm.instrumentEnable=true"
                              "-Dclojure.storm.instrumentOnlyPrefixes=dev"

                              "-Dcljs.storm.instrumentOnlyPrefixes=dev"
                              "-Dcljs.storm.instrumentEnable=true"
                              ]}

           :dev {:extra-paths ["src-dev" "classes"]

                 :extra-deps {;; to debug ClojureScript storm
                              ;; org.clojure/clojurescript {:local/root "/home/jmonetta/my-projects/clojurescript"}
                              }
                 :jvm-opts ["-Dvisualvm.display.name=FlowStorm"
                            "-Djdk.attach.allowAttachSelf" "-XX:+UnlockDiagnosticVMOptions" "-XX:+DebugNonSafepoints" ;; for the profilers

                            ;; for debugging java code
                            ;; "-Xdebug" "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044"
                            ]}

           :build {:extra-deps {io.github.clojure/tools.build {:mvn/version "0.9.4"}}
                   :ns-default build
                   :jvm-opts ["-Dcljfx.skip-javafx-initialization=true"] }

           :test {:extra-paths ["test"]
                  :extra-deps {lambdaisland/kaocha {:mvn/version "1.70.1086"}
                               org.clojure/clojurescript {:mvn/version "1.11.60"}}
                  :jvm-opts ["-Xmx10500m"]
                  :main-opts ["-m" "kaocha.runner"]}}}
